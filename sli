#!/bin/bash
#
# Simply Lightning - A versatile shell utility that simplifies Bitcoin
# Lightning Network packages management while offering a suite of handy
# tools for seamless node operations.
#
# (c) 2025 0xeeLi - MIT License
#
sli_version="0.1.1"

# --- Configurable Variables ---

SLI_DIR="$HOME/.sli"
LIT_DIR="$HOME/.lit"
LIT_CONF="$LIT_DIR/lit.conf"
LND_DIR="$HOME/.lnd"
WALLET_PASSWORD="$LND_DIR/wallet_password"
EDITOR="nano"

# Load optional custom SLi config file
[ -f "$SLI_DIR/sli.conf" ] && source "$SLI_DIR/sli.conf"

# --- Global Variables ---

INSTALLED_PKGS=${SLI_DIR}/packages
CACHE_DIR=${SLI_DIR}/cache
PKGS_LIST=${SLI_DIR}/packages.list
PKGS_URL="https://raw.githubusercontent.com/0xeeli/sli/refs/heads/main/packages.list"

# Colors
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
YELLOW='\033[0;33m'
RED='\033[1;31m'
NC='\033[0m' # No color

#
# --- Helper Functions ---
#

# Display usage instructions (ident with space)
usage() {
	cat << EOT
Usage: $(basename $0) [command|tool] [pkg|arg] [arg]
$(print_separator)
$(echo -e "${YELLOW}Commands:${NC}")
  init               Initialize: sli lit wallet
  start              Start a deamon: litd
  stop               Stop a deamon: litd
  re|reload          Reload  a deamon: litd
  sc|show-config     Display config file: lit.conf
  ed|edit            Edit a config file: lit.conf
  logs               Show last logs for a service (default: 30 lines)
  status             Show service status

$(echo -e "${YELLOW}Tools:${NC}")
  m2h|macaroon-hex   Get the HEX format of a macaroon
  gpw|gen-passwords  Gen new passwords for the wallet and Lit UI

$(echo -e "${YELLOW}Packages Manager:${NC}")
  in|install         Install a package
  ls|list            List packages
  cc|clean-cache     Remove downloaded packges tarball
  rm|remove          Remove a package
EOT
}

print_separator() {
	echo -e "${PURPLE}--------------------------------------------------------------------------------${NC}"
}

# Check if a command is available
check_command() {
	if ! command -v "$1" >/dev/null 2>&1; then
		echo -e "Error: ${RED}$1${NC} is required but not installed."
		exit 1
	fi
}

#
# --- Core Functions ---
#

# Should be run at first usage - Self install ;-)
sli_init() {
	pkg="sli"
	echo "⚡️ SLi Initialization"
	print_separator
	echo -e "Creating data structure in: ${YELLOW}$SLI_DIR${NC}"
	mkdir -p ${INSTALLED_PKGS}/${pkg} ${CACHE_DIR}
	echo -e "Storing curent SLi version: ${CYAN}$sli_version${NC}"
	echo "version=\"$sli_version\"" > ${INSTALLED_PKGS}/${pkg}/pkg.conf
	echo -e "Installing sli: /usr/local/bin/${pkg}"
	sudo cp -f ${0} /usr/local/bin
	echo "/usr/local/bin/sli" >  ${INSTALLED_PKGS}/${pkg}/files.list
	[ -f "$PKGS_LIST" ] || pkgs_get_list
	print_separator
}

# Let user use lit in place of litd
service_check() {
	if [ -z "$2" ]; then
		echo "Missing service name. Usage: sli $1 <service>"
		echo "" && exit 1
	fi
	if [ "$2" == "lit" ]; then
		service="litd"
	else
		service="$2"
	fi
}

service_start() {
	service_check "$@" || return 1
	echo "⚡️ Starting $service service..."
	sudo systemctl start ${service}
	wallet_state
}

service_stop() {
	service_check "$@" || return 1
	echo "⚡️ Stopping $service service..."
	sudo systemctl stop ${service}
}

service_reload() {
	service_check "$@" || return 1
	echo "⚡️ Reloading $service service..."
	sudo systemctl stop ${service}
	sleep 2
	sudo systemctl start ${service}
	wallet_state
}

# View service/daemon logs
service_logs() {
	local lines="${3:-30}"
	service_check ${@}
	echo -e "⚡️ Showing last $lines lines of logs for: ${CYAN}${service}${NC}"
    print_separator
	journalctl -q -u "$service" -n "$lines" --no-pager
	print_separator
}

# View service/daemon status
service_status() {
	service_check ${@}
	echo -e "⚡️ Service status for: ${CYAN}${service}${NC}"
    print_separator
    script -q -c "systemctl status ${service} --no-pager" /dev/null | sed '/^\s*└─/q'
    stty sane # Restore terminal settings
	print_separator
}

config_show() {
	echo -e "⚡️ Configuration file for: ${CYAN}$1${NC}"
	print_separator
	case "$1" in
		lit)
			if [ ! -f "$LIT_CONF" ]; then
				echo "No config file found. Please run 'sli init lit' to initialize."
			else
				cat ${LIT_CONF}
			fi ;;
		*)
			echo -e "No config file for: ${RED}$1${NC}" ;;
	esac
	print_separator
}

config_edit() {
	case "$1" in
		lit)
			if [ ! -f "$LIT_CONF" ]; then
				echo "No config file, run --> sli init lit"
			else
				${EDITOR} ${LIT_CONF}
			fi ;;
		*)
			echo "No config file for: $1" ;;
	esac
}

# Create a wallet if none
wallet_init() {
	if [ ! -f "$LND_DIR/data/chain/bitcoin/mainnet/wallet.db" ]; then
		lncli create
	else
		echo "A wallet database already exist:"
		echo -e " --> ${YELLOW}$LND_DIR/data/chain/bitcoin/mainnet/wallet.db${NC}"
	fi
}

wallet_state() {
    if [ ! -f "$LND_DIR/data/chain/bitcoin/mainnet/wallet.db" ]; then
        echo "🔒 No wallet.db file found. Make sure your wallet is properly initialized."
        return 1
    fi
    if [ "$(lncli state | grep LOCKED)" ]; then
        echo "🔒 Wallet is locked. Unlock manually with: lncli unlock"
    fi
}

# Basic and working lit.conf to get started
lit_config_file() {
	cat << EOT
#
# LiTd Settings: lit.conf
#
uipassword=
lnd-mode=integrated

#
# LND Settings
#

# Wallet
#lnd.wallet-unlock-password-file=${WALLET_PASSWORD}
#lnd.wallet-unlock-allow-create=true

# Set a nice name for your node
lnd.alias=SLiNode

# Optional URL for external fee estimation.
lnd.feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json

# Used by Lit UI
lnd.rpcmiddleware.enable=true

#
# Bitcoin Configuration
#

# Use a neutrino light back-end so we don't need a full ₿ node.
lnd.bitcoin.node=neutrino

# Connect to mainnet
lnd.bitcoin.mainnet=1
lnd.bitcoin.active=1

# The seed DNS server(s) to use for initial peer discovery.
lnd.bitcoin.dnsseed=nodes.lightning.directory,soa.nodes.lightning.directory
EOT
}

# Lit Systemd service set to current $USER
lit_service_file() {
	cat << EOT
[Unit]
Description=Litd Terminal Daemon

[Service]
Type=simple
Restart=always
RestartSec=120
ExecStart=/usr/local/bin/litd litd
User=$USER

[Install]
WantedBy=multi-user.target
EOT
}

# Lightning Terminal install function
lit_install() {
	# Custom version ?
	if [ -n "$1" ]; then
		lit_version="$1"
	else
		[ -f "$PKGS_LIST" ] || pkgs_get_list
		lit_version=$(grep "^lit|" ${PKGS_LIST} | cut -d "|" -f 2)
	fi

	# Set variables
	pkg=${INSTALLED_PKGS}/lit
	url="https://github.com/lightninglabs/lightning-terminal/releases/download/"
	tarball="lightning-terminal-linux-amd64-${lit_version}.tar.gz"
	litdir="lightning-terminal-linux-amd64-$lit_version"
	dlurl=${url}${lit_version}/${tarball}

	echo "⚡️ Installing: Lightning Terminal $lit_version"
	print_separator
	# Already installed ?
	if [ -d ${pkg} ]; then
		source ${pkg}/pkg.conf
		echo -e "${CYAN}Lit is already installed${NC}"
		echo "Version: $version" && unset version
		echo "" && exit 0
	fi

	# We work in Sli cache directory
	mkdir -p ${pkg} ${CACHE_DIR} && cd ${CACHE_DIR}

	pkg_download_tarball ${tarball} ${dlurl}

	# Record version
	echo "version=\"$lit_version\"" > ${pkg}/pkg.conf

	# Extract
	echo "Extracting: $tarball"
	tar xzf ${tarball}

	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	rm -f ${pkg}/files.list # Let's track installed files
	for bin in $(ls $litdir); do
		echo " * Installing: $bin"
		sudo cp -f ${litdir}/${bin} /usr/local/bin
		echo "/usr/local/bin/$bin" >> ${pkg}/files.list
	done
	rm -rf ${litdir}

	# Systemd service
	if [ ! -f /etc/systemd/system/litd.service ]; then
		echo -e "${CYAN}Creating systemd service file:${NC} litd.service"
		lit_service_file > litd.service
		sudo mv litd.service /etc/systemd/system/
		echo "/etc/systemd/system/litd.service" >> ${pkg}/files.list
		sudo systemctl daemon-reload
	fi
}

# Initialize LiTd
lit_init() {
	echo "⚡️ Lit Initialization"
	print_separator
	if [ ! -f "$LIT_CONF" ]; then
		echo -e "Creating config file: ${YELLOW}$LIT_CONF${NC}"
		mkdir -p ${HOME}/.lit && touch ${LIT_CONF}
		lit_config_file > ${LIT_CONF}
	else
		echo -e "Config file already exist:"
		echo -e " --> ${YELLOW}$LIT_CONF${NC}"
	fi
}

#
# --- Tools functions ---
#

# Convert macaroon to HEX
macaroon_to_hex() {
    local macaroon="${1:-admin}"
    local macaroon="${macaroon%.*}"
    local path="${LND_DIR}/data/chain/bitcoin/mainnet/${macaroon}.macaroon"
    echo -e "⚡️ Convert ${CYAN}$macaroon${NC} macaroon to HEX"
    print_separator
    check_command xxd
    if [ ! -f "${path}" ]; then
        echo "No macaroon found at:"
        echo " --> ${path}"
    else
        xxd -ps -u -c 1000 "${path}"
    fi
    print_separator
}

# Generate strong passwords for Lit UI or Wallet
passwords_gen() {
	echo "⚡️ Gen Passwords with: pwgen or openssl"
	print_separator
	echo ""
	# Prefer pwgen who include special characters
	if [ -x /usr/bin/pwgen ] && [ "$2" != "openssl" ]; then
		wallet_pwd=$(pwgen -c -n -y -s 30 1)
		ui_pwd=$(pwgen -c -n -y -s 30 1)
		echo "Wallet --> ${wallet_pwd}"
		echo "Lit UI --> ${ui_pwd}"
	else
		wallet_pwd=$(openssl rand -hex 24 | tr -d "=+/")
		ui_pwd=$(openssl rand -hex 24 | tr -d "=+/")
		echo "Wallet --> ${wallet_pwd}"
		echo "Lit UI --> ${ui_pwd}"
	fi
	echo ""
	echo -e "${CYAN}Write down your new password in a secure place!${NC}"
	echo ""
	read -p "Do you wish to change Wallet password ? (yes/no) " change
	if [ "$change" == "yes" ]; then
		echo "You can copy/paste it below."
		lncli changepassword
		# Update a wallet_password file ?
		if [ -f "$WALLET_PASSWORD" ]; then
			echo "Updating: $WALLET_PASSWORD"
			echo "${wallet_pwd}" > "${WALLET_PASSWORD}"
			chmod 0600 "${WALLET_PASSWORD}"
		fi
	fi
	unset change && echo ""
	if [ -f "$LIT_CONF" ]; then
		read -p "Do you wish to change Lit Web UI password ? (yes/no) " change
		if [ "$change" == "yes" ]; then
			echo "Updating: $LIT_CONF"
			sed -i s/"uipassword=.*"/"uipassword=${ui_pwd}"/ ${LIT_CONF}
			# Lit must reload to use the new password
			service_reload litd
			echo ""
			echo "Make sure your wallet is unlock to login with your new password."
		fi
	fi
	unset wallet_pwd ui_pwd
	echo "" && print_separator
}

#
# --- Packages Manager functions ---
#

# Download pkg if needed
pkg_download_tarball() {
	if [ ! -f ${CACHE_DIR}/${tarball} ]; then
		echo "Downloading: $tarball"
		wget -q ${dlurl} || { echo "Error downloading: ${tarball}"; exit 1; }
	else
		echo "Using cache: ${tarball}"
	fi
}

pkgs_get_list() {
	mkdir -p ${CACHE_DIR} && cd ${CACHE_DIR}
	echo "Getting packages list from GitHub..."
	wget -q ${PKGS_URL} || exit 1
	mv -f packages.list ${SLI_DIR}
}

pkgs_list() {
	echo "⚡️ Installed packages"
	print_separator
	[ -d "$INSTALLED_PKGS" ] || mkdir ${INSTALLED_PKGS}
	for pkg in $(ls ${INSTALLED_PKGS}); do
		source ${INSTALLED_PKGS}/${pkg}/pkg.conf
		echo "$pkg $version" | awk '{ printf "%-15s %-30s\n", $1, $2}'
		unset version
	done
	print_separator
	echo ""
	echo "⚡️ Available packages"
	print_separator
	# Ensure packages.list was downloaded
	[ -f "$PKGS_LIST" ] || pkgs_get_list
	for pkg in $(cat ${PKGS_LIST}); do
		name=$(echo $pkg | cut -d "|" -f 1)
		version=$(echo $pkg | cut -d "|" -f 2)
		echo "$name $version" | awk '{ printf "%-15s %-30s\n", $1, $2}'
	done
	print_separator
}

# Remove system files keep config/data in ~/.*
pkg_remove() {
	pkg="$1"
	if [ ! -d ${INSTALLED_PKGS}/${pkg} ]; then
		echo -e "Can't find package: ${RED}$pkg${NC}"
		echo "" && exit 1
	fi
	echo "⚡️ Removing package: $pkg"
	print_separator
	for file in $(cat ${INSTALLED_PKGS}/${pkg}/files.list); do
		echo " * Removing: $file"
		sudo rm -f ${file}
	done
	rm -rf ${INSTALLED_PKGS}/${pkg}
	print_separator
}

#
# --- Handle Command ---
#
handle_command() {
	case "$1" in
	
		init)
			# Initialization
			case "$2" in
				wallet)
					echo "⚡️ Wallet Initialization"
					print_separator
					wallet_init ;;
				lit)
					lit_init ;;
				*)
					sli_init ;;
			esac ;;
	
		start) service_start ${@} ;;
		stop) service_stop ${@} ;;	
		re|reload) service_reload ${@} ;;
		sc|show-config) config_show ${2} ;;
		ed|edit) config_edit ${2} ;;
		logs) service_logs ${@} ;;
		status) service_status ${@} ;;
	
		#
		# --- Tools ---
		#
	
		m2h|macaroon-to-hex) macaroon_to_hex ${2} ;;
		gpw|gen-passwords) passwords_gen ${@} ;;
	
		#
		# --- Packages manager ---
		#
	
		'in'|install)
			if [ "$2" == "sli" ]; then
				echo "If you need to reinstall this version, run: sli init" 
				echo "" && exit 0
			fi
			if [ $(declare -F ${2}_install) ]; then
				${2}_install ${3} # $3 = version
				print_separator
			else
				echo "No package named: $2"
			fi ;;
	
		ls|list)
			pkgs_list ;;
	
		up|upgrade)
			# Downlad a packages.list, compare installed version to the list
			# upgrade everything
			pkgs_get_list
			#pkgs_upgarde
			;;
	
		cc|clean-cache)
			echo "Removing cache directory content..."
			rm -rf ${CACHE_DIR}/* ;;
	
		rm|remove)
			pkg_remove ${2} ;;
	
		*)
			usage ;;
	esac
}

# Let's have default empty line for all actions
echo ""
handle_command ${@}
echo ""
exit 0
