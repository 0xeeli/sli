#!/bin/bash
#
# Simply Lightning - A versatile shell utility that simplifies Bitcoin
# Lightning Network packages management while offering a suite of handy
# tools for seamless node operations.
#
# (c) 2025 0xeeLi ‚ö°Ô∏è MIT License
#
sli_version="0.0.1"

# --- Configurable Variables ---

SLI_DIR="$HOME/.sli"
LIT_DIR="$HOME/.lit"
LIT_CONF="$LIT_DIR/lit.conf"
LND_DIR="$HOME/.lnd"
LND_CONF="$LND_DIR/lnd.conf"
WALLET_PASS="$LND_DIR/wallet.pass"
EDITOR="nano"

# Backup Configs
BACKUP_DIR="$HOME/lnd-backup"
WALLET_PASS="$LND_DIR/wallet.pass"
TMP_BACKUP_DIR="$BACKUP_DIR/tmp"
EXTRACTED_DIR="$BACKUP_DIR/extracted"

# Load optional custom SLi config file
[ -f "$SLI_DIR/sli.conf" ] && source "$SLI_DIR/sli.conf"

# --- Global Variables ---

INSTALLED_PKGS=${SLI_DIR}/packages
CACHE_DIR=${SLI_DIR}/cache
PKGS_LIST=${SLI_DIR}/packages.list
PKGS_URL="https://raw.githubusercontent.com/0xeeli/sli/refs/heads/main/packages.list"

# SLi Wallet
SLIWA_LOG="${SLI_DIR/sliwa.log}"

# Colors
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
YELLOW='\033[0;33m'
RED='\033[1;31m'
GREEN='\033[1;32m'
NC='\033[0m' # No color

# Emoji: üîå ‚ö°Ô∏è ‚úò üîí üí∞ üîó 

#
# --- Helper Functions ---
#

# Display usage instructions (ident with space)
usage() {
	cat << EOT
Usage: $(basename $0) [command|tool] [pkg|arg] [arg]
$(print_separator)
$(echo -e "${YELLOW}Commands:${NC}")
  init               Initialize: sli lit wallet
  start              Start a deamon: litd
  stop               Stop a deamon: litd
  rs|restart         Restart a deamon: litd
  sc|show-config     Display config file: lit.conf
  ed|edit            Edit a config file: lit.conf
  lg|logs            Show last logs for a service (default: 30 lines)
  st|status          Show service status
  nh|node-health     Node Health Check (Status, blocks, peers)

$(echo -e "${YELLOW}Tools:${NC}")
  m2h|macaroon-hex   Get the HEX format of a macaroon
  gpw|gen-passwords  Gen new passwords for the wallet and Lit UI
  nb|node-backup     Backup and encrypt your node
  nr|node-restore    Restore a GPG encrypted backup file
  ne|node-extract    Extract a GPG encrypted backup file
  wa|wallet          Run 'sli wa' to display usage

$(echo -e "${YELLOW}Packages Manager:${NC}")
  in|install         Install a package
  up|upgrade         Upgrade installed packages
  ls|list            List installed and available packages
  cc|clean-cache     Remove downloaded packges tarball
  rm|remove          Remove a package
EOT
}

wallet_usage() {
	cat << EOT
Usage: $(basename $0) [wa|wallet] [command]
$(print_separator)
  new         Create a ‚ÇøTC onchain address
  lsaddr      List onchain wallet addresses
  bal         Wallet balance
  send        Send ‚ÇøTC onchain
  openchan    Open a channel
EOT
}

sli_version() { echo "SLi version: $sli_version"; }

# Try to make pretty outputs!
print_separator() {
	echo -e "${PURPLE}--------------------------------------------------------------------------------${NC}"
}

# Check if a command is available
check_command() {
	if ! command -v "$1" >/dev/null 2>&1; then
		echo -e " ‚úò Error: ${RED}$1${NC} is required but not installed."
		echo -e " * Try: sudo apt install $1  # On Debian/Ubuntu"
		echo "" && exit 1
	fi
}

# Log events for SLi Wallet aka SLiWa ;-)
log_action() {
	local log_file="$SLI_DIR/sliwa.log"
	echo "$(date '+%Y-%m-%d %H:%M:%S') : $1" >> "$SLI_DIR/sliwa.log"; 
	# Rotate log if file exceeds 1MB
	if [ $(stat -c %s "$log_file") -gt 1048576 ]; then
		mv -f "$log_file" "$log_file.old"
		touch "$log_file"
	fi
}

#
# --- Core Functions ---
#

# Should be run at first usage - Self install ;-)
sli_init() {
	pkg="sli"
	echo "‚ö°Ô∏è SLi Initialization"
	print_separator
	echo -e "Creating data structure in: ${YELLOW}$SLI_DIR${NC}"
	mkdir -p ${INSTALLED_PKGS}/${pkg} ${CACHE_DIR}
	echo -e "Storing curent SLi version: ${CYAN}$sli_version${NC}"
	echo "version=\"$sli_version\"" > ${INSTALLED_PKGS}/${pkg}/pkg.conf
	echo -e "Installing sli: /usr/local/bin/${pkg}"
	sudo cp -f ${0} /usr/local/bin 2>/dev/null
	echo "/usr/local/bin/sli" >  ${INSTALLED_PKGS}/${pkg}/files.list
	[ -f "$PKGS_LIST" ] || pkgs_get_list
	# Create an empty sli.conf to let user customize some variables ???
	#touch ${SLI_DIR}/sli.conf
	print_separator
}

# Used for upgrade, we keep main branch for now since we have control
# on packages.list to modify versions.
sli_install() {

	PKG_NAME="sli"
	SRC_URL="https://github.com/0xeeli/sli/archive/refs/heads"
	PKG_VERSION="$(pkg_get_version $PKG_NAME)"
	TARBALL="main.zip"
	SRC_DIR="sli-main"
	DL_URL=${SRC_URL}/${TARBALL}

	# Pre install
	pkg_pre_install "sli" "$PKG_VERSION"
	pkg_download_tarball
	pkg_extract_tarball

	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	echo " * Installing: sli"
	sudo cp -f ${SRC_DIR}/${PKG_NAME} /usr/local/bin
	echo "/usr/local/bin/sli" > ${PKG_DATA}/files.list

	# Post install
	pkg_post_install
}

# Let user use lit in place of litd
service_check() {
	if [ -z "$2" ]; then
		echo " ‚úò Missing service name. Usage: sli $1 <service>"
		echo "" && exit 1
	fi
	if [ "$2" == "lit" ]; then
		service="litd"
	else
		service="$2"
	fi
}

service_start() {
	service_check "$@" || return 1
	if [ "$(systemctl is-active ${service})" != "active" ]; then
		echo "‚ö°Ô∏è Starting $service service..."
		sudo systemctl start ${service}
	else
		echo "‚ö°Ô∏è $service service is active."
	fi
	wallet_db_exist
}

service_stop() {
	service_check "$@" || return 1
	if [ "$(systemctl is-active ${service})" == "active" ]; then
		echo "‚ö°Ô∏è Stopping $service service..."
		sudo systemctl stop ${service}
	else
		echo "‚ö°Ô∏è $service service is not active."
	fi
}

service_restart() {
	service_check "$@" || return 1
	echo "‚ö°Ô∏è Restarting $service service..."
	# sudo systemctl restart ${service} : Not always working with litd
	sudo systemctl stop ${service}
	sleep 2
	sudo systemctl start ${service}
	wallet_db_exist
}

# View service/daemon logs
service_logs() {
	local lines="${3:-30}"
	service_check ${@}
	echo -e "‚ö°Ô∏è Showing last $lines lines of logs for: ${CYAN}${service}${NC}"
	print_separator
	journalctl -q -u "$service" -n "$lines" --no-pager
	print_separator
}

# View service/daemon status
service_status() {
	service_check ${@}
	echo -e "‚ö°Ô∏è Service status for: ${CYAN}${service}${NC}"
	print_separator
	script -q -c "systemctl status ${service} --no-pager" /dev/null | sed '/^\s*‚îî‚îÄ/q'
	stty sane # Restore terminal settings
	print_separator
}

# Used by package install to generate a secure systemd unit
config_service_unit() {
	service_unit="${1}.service"
	service_desc="$2"
	if [ ! -f /etc/systemd/system/${service_unit} ]; then
		echo -e "${CYAN}Creating systemd service file:${NC} ${service_unit}"
		cat << EOF | sudo tee /etc/systemd/system/${service_unit} > /dev/null
[Unit]
Description=${service_desc}
After=network.target

[Service]
ExecStart=/usr/local/bin/${1}
User=$USER
Type=simple
Restart=always
RestartSec=60
LimitNOFILE=8192
PrivateTmp=true
ProtectSystem=strict
NoNewPrivileges=true
MemoryDenyWriteExecute=true
AmbientCapabilities=CAP_NET_BIND_SERVICE

[Install]
WantedBy=multi-user.target
EOF
		# Track installed file
		echo "/etc/systemd/system/${service_unit}" >> ${PKG_DATA}/files.list
		sudo systemctl daemon-reload
		#sudo systemctl enable ${1}
	fi
}

# Show config file if any
config_show_file() {
	if [ ! -f "$1" ]; then
		echo " ‚úò No config file found. Try 'sli init <pkg>' to initialize."
	else
		cat "$1"
	fi
}

# Set config file path
config_show() {
	if [ ! -n "$1" ]; then
		echo -e "Usage: $(basename $0) show-config <pkg>\n" && exit 0
	fi
	echo -e "‚ö°Ô∏è Configuration file for: ${CYAN}$1${NC}"
	print_separator
	case "$1" in
		lit) config_show_file "$LIT_CONF" ;;
		lnd) config_show_file "$LND_CONF" ;;
		sli) config_show_file "$SLI_CONF" ;;
		*) echo -e " ‚úò No config file for: ${RED}$1${NC}" ;;
	esac
	print_separator
}

# Edit config if any. User can customize EDITOR with ~/.sli/sli.conf
config_edit_file() {
	if [ ! -f "$1" ]; then
		echo " ‚úò No config file found: Try 'sli init <pkg>' to initialize."
	else
		${EDITOR} ${1}
	fi
}

# Set config file path for editing
config_edit() {
	if [ ! -n "$1" ]; then
		echo -e "Usage: $(basename $0) edit <pkg>\n" && exit 0
	fi
	case "$1" in
		lit) config_edit_file "$LIT_CONF" ;;
		lnd) config_edit_file "$LND_CONF" ;;
		sli) config_edit_file "$SLI_CONF" ;;
		*) echo " ‚úò No config file for: $1" ;;
	esac
}

# TO IMPROVE
# We check the files created by SLi
security_check() {
	echo "‚ö°Ô∏è Security Check on files created by SLi"
	print_separator
	for file in ${WALLET_PASS} ${LIT_CONF} ${LND_CONF}; do
		# Ensure file exist before checking permissions
		if [ -f "$file" ]; then
			echo -en "Checking ${YELLOW}$(basename $file)${NC}:"
			if [ "$(stat -c %a "$file")" == "600" ]; then
				echo -e " permissions ${GREEN}0600${NC}"
			else
				echo " ‚úò Security fix needed: chmod 0600 $file"
			fi
		fi
	done
}

#
# --- Wallet Tools and Functions ---
#

# Create a wallet if none
wallet_init() {
	if [ "$1" == "--header" ]; then
		echo "‚ö°Ô∏è Wallet Initialization"
		print_separator
	fi
	if [ ! -f "$LND_DIR/data/chain/bitcoin/mainnet/wallet.db" ]; then
		echo -e "Launching: ${GREEN}lncli create${NC}"
		echo "üîí Paste your generated or own Wallet password"
		echo ""
		lncli create
	else
		echo "A wallet database already exist:"
		echo -e " --> ${YELLOW}$LND_DIR/data/chain/bitcoin/mainnet/wallet.db${NC}"
	fi
}

wallet_info() {
	if [ "$(lncli state | grep LOCKED)" ]; then
		echo "üîí Wallet is locked."
	else
		echo "üîì Wallet is unlocked."
	fi
}

# Used by: service_start and service_restart (litd or lnd)
wallet_db_exist() {
	case "$service" in
		litd|lnd)
			if [ ! -f "$LND_DIR/data/chain/bitcoin/mainnet/wallet.db" ]; then
				echo "üîí No wallet.db file found."
				return 1
			fi ;;
		cln)
			# If Core lighning is implemented ;-)
			echo "Core lighning" ;;
	esac
}

# Create a new onchain wallet
wallet_new_address() {
	check_command "jq"
	echo "‚ö°Ô∏è New ‚ÇøTC Address for onchain funds (p2wkh)"
	print_separator
	addr=$(lncli newaddress p2wkh | jq -r '.address')
	echo "New ‚ÇøTC address: $addr"
	log_action "Created BTC onchain address: $addr"
	print_separator
}

# Parse JSON output with jq to nicely display wallet(s) and show balance(s)
wallet_list_addresses() {
	check_command "jq"
	echo "‚ö°Ô∏è Onchain ‚ÇøTC Addresses"
	print_separator
	# Exclude addresses without funds ?
	#lncli wallet addresses list | jq -r '.account_with_addresses[].addresses[] | select(.balance != "0") | "\(.address) \(.balance)"'
	lncli wallet addresses list | jq -r '.account_with_addresses[].addresses[] | "\(.address) \(.balance)"'
	print_separator
}

wallet_balance() {
	check_command "jq"
	echo "‚ö°Ô∏è Wallet Balances"
	print_separator
	echo "On-chain Balance:"
	lncli walletbalance | jq -r '"\(.confirmed_balance) sat (confirmed) / \(.unconfirmed_balance) sat (unconfirmed)"'
	echo -e "\nChannel Balance:"
	lncli channelbalance | jq -r '"\(.balance) sat (local) / \(.remote_balance) sat (remote)"'
	print_separator
}

# Let send some sats
wallet_send_onchain() {
	echo "üí∞ Send ‚ÇøTC Onchain (Amount in sat)"
	print_separator && echo ""
	read -p "Address: " addr
	read -p "Amount : " amt
	if [ -n "$addr" ] && [ -n "$amt" ]; then
		lncli sendcoins --addr="$addr" --amount="$amt"
		log_action "Sent $amt sats to $addr"
	else
		echo " ‚úò Address or amount missing."
	fi
}

# Open a channel
wallet_open_channel() {
	echo "üîó Open a Channel (Amount in sat)"
	print_separator && echo ""
	read -p "Node ID: " node
	read -p "Amount : " amt
	if [ -n "$node" ] && [ -n "$amt" ]; then
		lncli openchannel --node_key="$node" --local_amt="$amt"
		log_action "Opened channel with $node for $amt sats"
	fi
}

# Handle Wallet commands
wallet() {
	case "$2" in
		init) wallet_init "--header" ;;
		new) wallet_new_address ;;
		lsa|lsaddr) wallet_list_addresses ;;
		bal|balance) wallet_balance ;;
		send) wallet_send_onchain ;;
		opc|openchan) wallet_open_channel ;;
		*) wallet_usage ;;
	esac
}

#
# --- Packages function: init + install + config files ---
#

# Basic and working lit.conf to get started
lit_config_file() {
	cat << EOT
#
# LiTd Settings: lit.conf
#
uipassword=
lnd-mode=integrated

#
# LND Settings
#

# Wallet
#lnd.wallet-unlock-password-file=${WALLET_PASS}
#lnd.wallet-unlock-allow-create=true

# Set a nice name for your node
lnd.alias=SLiNode

# Optional URL for external fee estimation.
lnd.feeurl=https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json

# Used by Lit UI
lnd.rpcmiddleware.enable=true

#
# Bitcoin Configuration
#

# Use a neutrino light back-end so we don't need a full ‚Çø node.
lnd.bitcoin.node=neutrino

# Connect to mainnet
lnd.bitcoin.mainnet=1
lnd.bitcoin.active=1

# The seed DNS server(s) to use for initial peer discovery.
lnd.bitcoin.dnsseed=nodes.lightning.directory,soa.nodes.lightning.directory
EOT
}

# Lightning Terminal install function
lit_install() {

	PKG_NAME="lit"
	SRC_URL="https://github.com/lightninglabs/lightning-terminal/releases/download"
	PKG_VERSION="$(pkg_get_version $PKG_NAME)"
	TARBALL="lightning-terminal-linux-amd64-${PKG_VERSION}.tar.gz"
	SRC_DIR="lightning-terminal-linux-amd64-${PKG_VERSION}"
	DL_URL=${SRC_URL}/${PKG_VERSION}/${TARBALL}

	# Pre install
	pkg_pre_install "lit" "$PKG_VERSION"
	pkg_download_tarball
	pkg_extract_tarball

	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	for bin in $(ls $SRC_DIR); do
		# Handle conflict with loop, pool and friends
		if ! command -v "$bin" >/dev/null 2>&1; then
			echo " * Installing: $bin"
			sudo cp -f ${SRC_DIR}/${bin} /usr/local/bin
			echo "/usr/local/bin/$bin" >> ${PKG_DATA}/files.list
		fi
	done

	# Systemd service
	config_service_unit "litd" "Lightning Terminal (LiT)"
	pkg_post_install
}

# Initialize LiTd
lit_init() {
	echo "‚ö°Ô∏è Lit Initialization"
	print_separator
	if [ ! -f "$LIT_CONF" ]; then
		echo -e "Creating config file: ${YELLOW}$LIT_CONF${NC}"
		mkdir -p ${HOME}/.lit && touch ${LIT_CONF}
		lit_config_file > ${LIT_CONF}
		echo "Setting secure permissions: read only by $USER (0600)"
		chmod 0600 ${LIT_CONF}
	else
		echo -e "Config file already exist:"
		echo -e " --> ${YELLOW}$LIT_CONF${NC}"
	fi
	# Check if uipassword= is empty and offer to creat random password
	ui_password=$(awk -F= '$1=="uipassword"{print $2}' "$LIT_CONF")
	if [ -z "$ui_password" ]; then
		echo ""
		echo -e "${CYAN}Password for Lit Web UI${NC}"
		read -p "Create a secure password ? (yes/no) " gen_uipassword
		if [ "$gen_uipassword" == "yes" ]; then
			password_init ui-password
		fi
	else
		echo " --> uipassword= is set"
	fi
	# We can now start litd and create a Wallet
	echo "" && service_start "start" "litd"
	if [ ! -f "$LND_DIR/data/chain/bitcoin/mainnet/wallet.db" ]; then
		echo ""
		echo -e "${CYAN}Wallet Creation${NC}"
		# Create or use existing wallet password
		if [ ! -f "$WALLET_PASS" ]; then
			read -p "Create a secure password ? (yes/no) " gen_walletpass
			if [ "$gen_walletpass" == "yes" ]; then
				password_init wallet-password
			fi
		else
			echo "Found existing Wallet password:"
			echo -e " --> ${YELLOW}$WALLET_PASS${NC}"
			echo " --> $(cat $WALLET_PASS)"
			echo ""
		fi
		# Now we can initialze wallet
		wallet_init
	else
		echo "üîí Found Wallet database"
		echo -e " --> ${YELLOW}$WALLET_PASS${NC}"
	fi
	# Wallet auto-unlock
	if [ ! "$(grep ^lnd.wallet-unlock-password-file $LIT_CONF)" ]; then
		echo ""
		echo -e "${CYAN}Wallet Auto-unlock${NC}"
		echo "Let litd auto-unlock the wallet on startup (useful)"
		echo ""
		read -p "Do you wish to enable Wallet auto-unlock ? (yes/no) " auto_unlock
		if [ "$auto_unlock" == "yes" ]; then
			echo "Enabling auto-unlock in: $LIT_CONF"
			sed -i 's/#lnd.wallet-unlock-password-file=/lnd.wallet-unlock-password-file=/' "$LIT_CONF"
			sed -i 's/#lnd.wallet-unlock-allow-create=true/lnd.wallet-unlock-allow-create=true/' "$LIT_CONF"
			echo "Restarting litd to apply auto-unlock..."
			service_restart "restart" "litd"
		else
			echo "Edit lit.conf if you want auto-unlock or run again: sli init"
		fi
	else
		echo "Wallet auto-unlock is enabled"
	fi
}

# This pool package provides loop and loopd (deamon). Conflict with Lit
# package, we keep this build.
loop_install() {
	
	PKG_NAME="loop"
	SRC_URL="https://github.com/lightninglabs/loop/releases/download"
	PKG_VERSION="$(pkg_get_version $PKG_NAME)"
	TARBALL="${PKG_NAME}-linux-amd64-${PKG_VERSION}.tar.gz"
	SRC_DIR="${PKG_NAME}-linux-amd64-${PKG_VERSION}"
	DL_URL=${SRC_URL}/${PKG_VERSION}/${TARBALL}
	
	# Pre install
	pkg_pre_install "$PKG_NAME" "$PKG_VERSION"
	pkg_download_tarball
	pkg_extract_tarball
	
	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	echo " * Installing: ${PKG_NAME}"
	sudo cp -f ${SRC_DIR}/${PKG_NAME} /usr/local/bin
	echo " * Installing: ${PKG_NAME}d"
	sudo cp -f "${SRC_DIR}/${PKG_NAME}d" /usr/local/bin
	
	echo "/usr/local/bin/${PKG_NAME}" > ${PKG_DATA}/files.list
	echo "/usr/local/bin/${PKG_NAME}d" >> ${PKG_DATA}/files.list
	
	# Pool will conflict with LiT Bundle, prefer original version
	if grep -q ".*loop" ${INSTALLED_PKGS}/lit/files.list; then
		echo -e " * ${YELLOW}NOTE:${NC} Loop already installed by lit --> Keeping this build"
		sed -i '/^\/usr\/local\/bin\/loop$/d' "${INSTALLED_PKGS}/lit/files.list"
	fi
	
	# Systemd service
	config_service_unit "loopd" "Loopd Off/On Chain Bridge"
	
	echo "Documentation: https://lightning.engineering/loop/"
	
	# Post install
	pkg_post_install
}

# This pool package provides pool and poold (deamon) standalone pool
# provided by LiT don't work properly.
pool_install() {
	
	PKG_NAME="pool"
	SRC_URL="https://github.com/lightninglabs/pool/releases/download"
	PKG_VERSION="$(pkg_get_version $PKG_NAME)"
	TARBALL="${PKG_NAME}-linux-amd64-${PKG_VERSION}.tar.gz"
	SRC_DIR="${PKG_NAME}-linux-amd64-${PKG_VERSION}"
	DL_URL=${SRC_URL}/${PKG_VERSION}/${TARBALL}
	
	# Pre install
	pkg_pre_install "$PKG_NAME" "$PKG_VERSION"
	pkg_download_tarball
	pkg_extract_tarball
	
	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	echo " * Installing: ${PKG_NAME}"
	sudo cp -f ${SRC_DIR}/${PKG_NAME} /usr/local/bin
	echo " * Installing: ${PKG_NAME}d"
	sudo cp -f "${SRC_DIR}/${PKG_NAME}d" /usr/local/bin
	
	echo "/usr/local/bin/${PKG_NAME}" > ${PKG_DATA}/files.list
	echo "/usr/local/bin/${PKG_NAME}d" >> ${PKG_DATA}/files.list
	
	# Pool will conflict with LiT Bundle, prefer original version
	if grep -q ".*pool" ${INSTALLED_PKGS}/lit/files.list; then
		echo -e " * ${CYAN}NOTE:${NC} Pool already installed by lit --> Keeping this build"
		sed -i '/^\/usr\/local\/bin\/pool$/d' "${INSTALLED_PKGS}/lit/files.list"
	fi
	
	# Systemd service. Do we realy want pool for everyone ? I mean
	# experienced user will create the file by them self right ?
	#config_service_unit "poold" "Lightning Pool Daemon"
	
	echo "Documentation: https://pool.lightning.engineering/"
	
	# Post install
	pkg_post_install
}

# lndconnect - https://github.com/LN-Zap/lndconnect
lndconnect_install() {

	PKG_NAME="lndconnect"
	SRC_URL="https://github.com/LN-Zap/lndconnect/releases/download/"
	PKG_VERSION="$(pkg_get_version $PKG_NAME)"
	TARBALL="${PKG_NAME}-linux-amd64-${PKG_VERSION}.tar.gz"
	SRC_DIR="${PKG_NAME}-linux-amd64-${PKG_VERSION}"
	DL_URL=${SRC_URL}/${PKG_VERSION}/${TARBALL}

	# Pre install
	pkg_pre_install "$PKG_NAME" "$PKG_VERSION"
	pkg_download_tarball
	pkg_extract_tarball

	# Install to /usr/local/bin
	echo -e "${CYAN}Install path: /usr/local/bin${NC}"
	echo " * Installing: ${PKG_NAME}"
	sudo cp -f ${SRC_DIR}/${PKG_NAME} /usr/local/bin
	echo "/usr/local/bin/${PKG_NAME}" > ${PKG_DATA}/files.list

	# Post install
	pkg_post_install
}

#
# --- Tools functions ---
#

# Convert macaroon to HEX
macaroon_to_hex() {
	local macaroon="${1:-admin}"
	local macaroon="${macaroon%.*}"
	local path="${LND_DIR}/data/chain/bitcoin/mainnet/${macaroon}.macaroon"
	echo -e "‚ö°Ô∏è Convert ${CYAN}$macaroon${NC} macaroon to HEX"
	print_separator
	check_command xxd
	if [ ! -f "${path}" ]; then
		echo "No macaroon found at:"
		echo " --> ${path}"
	else
		xxd -ps -u -c 1000 "${path}"
	fi
	print_separator
}

# Generate strong passwords for Lit UI or Wallet. Prefer pwgen who
# include special characters
passwords_gen() {
	if [ -x /usr/bin/pwgen ] && [ "$1" != "openssl" ]; then
		wallet_pwd=$(pwgen -c -n -y -s 30 1)
		ui_pwd=$(pwgen -c -n -y -s 30 1)
	else
		wallet_pwd=$(openssl rand -hex 24 | tr -d "=+/")
		ui_pwd=$(openssl rand -hex 24 | tr -d "=+/")
	fi
}

# Change passwords for Lit UI and/or Wallet
passwords_change() {
	echo "‚ö°Ô∏è Change Passwords using: pwgen or openssl"
	print_separator
	echo ""
	passwords_gen ${2}
	echo "Wallet --> ${wallet_pwd}"
	echo "Lit UI --> ${ui_pwd}"
	echo ""
	echo -e "${CYAN}Write down your new password in a secure place!${NC}"
	echo ""
	read -p "Do you wish to change Wallet password ? (yes/no) " change
	if [ "$change" == "yes" ]; then
		echo "You can copy/paste it below."
		lncli changepassword
		# Update a wallet_password file ?
		if [ -f "$WALLET_PASS" ]; then
			echo "Updating: $WALLET_PASS"
			echo "${wallet_pwd}" > "${WALLET_PASS}"
			echo "Setting secure permissions: read only by $USER (0600)"
			chmod 0600 "${WALLET_PASS}"
		fi
	fi
	unset change && echo ""
	if [ -f "$LIT_CONF" ]; then
		read -p "Do you wish to change Lit Web UI password ? (yes/no) " change
		if [ "$change" == "yes" ]; then
			echo "Updating: $LIT_CONF"
			sed -i s/"uipassword=.*"/"uipassword=${ui_pwd}"/ ${LIT_CONF}
			# Lit must reload to use the new password
			service_restart "restart" "litd"
			echo ""
			echo "Make sure your wallet is unlock to login with your new password."
		fi
	fi
	unset wallet_pwd ui_pwd
	echo "" && print_separator
}

# Handle passwords when initializing
password_init() {
	case "$1" in
		ui-password)
			passwords_gen "openssl"
			echo ""
			echo -e "${YELLOW}Lit UI pass -->${NC} ${ui_pwd}"
			echo ""
			echo "Write down or copy/past your UI password in a secure place."
			read -p "When your password is saved: press ENTER to continue"
			echo ""
			echo -e "${CYAN}Storing Lit UI password in:${NC} $LIT_CONF"
			sed -i s/"uipassword=.*"/"uipassword=${ui_pwd}"/ ${LIT_CONF}
			unset ui_pwd ;;
		wallet-password)
			passwords_gen "openssl"
			echo ""
			echo -e "${YELLOW}Wallet pass -->${NC} ${wallet_pwd}"
			echo ""
			echo "Write down or copy/past your Wallet password in a secure place."
			read -p "When your password is saved: press ENTER to continue"
			echo ""
			echo -e "${CYAN}Storing Wallet password in:${NC} $WALLET_PASS"
			echo "${wallet_pwd}" > "${WALLET_PASS}"
			echo "Setting secure permissions: read only by $USER (0600)"
			chmod 0600 "${WALLET_PASS}"
			echo "" ;;
	esac
}

# Check if a backup file was given
node_backup_check_path() {
	BACKUP_FILE="$1"
	if [ -z "$BACKUP_FILE" ]; then
		echo " ‚úò Missing backup file path: $(basename $0) $1 <file.gpg>"
		echo "" && exit 1
	fi
}

# Function to create a backup
node_backup() {

	echo "‚ö°Ô∏è Creating Node Backup"
	print_separator
	# Ensure backup directory exists
	echo " * Preparing backup directories..."
	mkdir -p "$BACKUP_DIR" "$TMP_BACKUP_DIR"

	echo " * Exporting Static Channel Backup (SCB)..."
	lncli exportchanbackup --all --output_file="$TMP_BACKUP_DIR/channel.backup"

	echo " * Copying LND files to backup directory..."
	cp -r "$LND_DIR" "$TMP_BACKUP_DIR/"

	echo " * Creating tarball archive..."
	TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
	BACKUP_FILE="$BACKUP_DIR/lnd_backup_$TIMESTAMP.tar.gz"
	tar -czf "$BACKUP_FILE" -C "$TMP_BACKUP_DIR" .

	echo " * Cleaning up temporary files..."
	rm -rf "$TMP_BACKUP_DIR"

	echo " * Encrypting backup..."
	gpg --batch --yes --passphrase-file "$WALLET_PASS" -c "$BACKUP_FILE"
	rm -f "$BACKUP_FILE"

	size=$(du -sh ${BACKUP_FILE}.gpg | cut -d "	" -f 1)
	echo -e " ‚úî Backup completed successfully: ${CYAN}${size}${NC}"
	echo -e "Encrypted backup: ${YELLOW}$(basename ${BACKUP_FILE}.gpg)${NC}"
	print_separator
}

# Function to restore a backup
node_backup_restore() {

	node_backup_check_path "$2"
	echo "‚ö°Ô∏è Restoring Node Backup"
	print_separator
	# Ensure backup directory exists
	echo " * Preparing to restore backup..."
	mkdir -p "$BACKUP_DIR" "$TMP_BACKUP_DIR"

	echo -e " * Decrypting: ${YELLOW}$(basename $BACKUP_FILE)${NC}"
	gpg --batch --yes --passphrase-file "$WALLET_PASS" \
		-o "$TMP_BACKUP_DIR/lnd_backup.tar.gz" -d "$BACKUP_FILE"

	echo " * Extracting backup..."
	tar -xzf "$TMP_BACKUP_DIR/lnd_backup.tar.gz" -C "$TMP_BACKUP_DIR"

	echo " * Restoring LND files..."
	cp -r "$TMP_BACKUP_DIR/.lnd" "$HOME/"

	echo " * Cleaning up temporary files..."
	rm -rf "$TMP_BACKUP_DIR"

	echo " ‚úî Restore completed. "
	echo -e "${CYAN}Restart LND/LiTd and unlock your wallet (if no auto-unlock).${NC}"
	print_separator
}

# Function to extract a backup for inspection
node_backup_extract() {

	node_backup_check_path "$2"
	echo "‚ö°Ô∏è Extracting Node Backup"
	print_separator
	# Ensure backup directory exists
	echo " * Preparing for extraction..."
	mkdir -p "$BACKUP_DIR" "$EXTRACTED_DIR"

	echo -e " * Decrypting: ${YELLOW}$(basename $BACKUP_FILE)${NC}"
	gpg --batch --yes --passphrase-file "$WALLET_PASS" \
		-o "$EXTRACTED_DIR/lnd_backup.tar.gz" -d "$BACKUP_FILE"

	echo " * Extracting backup contents for inspection..."
	tar -xzf "$EXTRACTED_DIR/lnd_backup.tar.gz" -C "$EXTRACTED_DIR"
	rm -f "$EXTRACTED_DIR/lnd_backup.tar.gz"

	echo " ‚úî Backup extracted in: $EXTRACTED_DIR/lnd_backup"
	echo -e "${CYAN}You can now inspect your files.${NC}"
	print_separator
}

# To be improved if/when LND is integrated
node_health() {
	echo "‚ö°Ô∏è Node Health Check"
	print_separator
	echo "Service Status:"
	systemctl is-active litd >/dev/null 2>&1 && echo -e " - litd: ${GREEN}Running${NC}" \
		|| echo " - litd: ${RED}Stopped${NC}"
	echo -e "\nSync Status:"
	lncli getinfo | jq -r '" - Synced: \(.synced_to_chain) | Block Height: \(.block_height)"'
	echo -e "\nConnected Peers:"
	lncli listpeers | jq -r '.peers | length' | xargs echo " - Peers:"
	print_separator
}

#
# --- Packages Manager functions ---
#

pkg_get_version() {
	grep "^${1}|" ${PKGS_LIST} | cut -d "|" -f 2
}

# Download pkg if needed
pkg_download_tarball() {
	if [ ! -f ${CACHE_DIR}/${TARBALL} ]; then
		echo "Downloading: $TARBALL"
		wget -q ${DL_URL} || { echo " ‚úò Error downloading: ${TARBALL}"; exit 1; }
	else
		echo "Using cache: ${TARBALL}"
	fi
}

pkg_extract_tarball() {
	echo "Extracting: $TARBALL"
	case "$TARBALL" in
		*.tar.gz) tar xzf ${TARBALL} ;;
		*.tar.bz2) tar xjf ${TARBALL} ;;
		*.zip) unzip ${TARBALL} ;;
	esac
}

pkgs_get_list() {
	mkdir -p ${CACHE_DIR} && cd ${CACHE_DIR}
	echo "Fetching packages list from GitHub..."
	wget -q ${PKGS_URL} || exit 1
	mv -f packages.list ${SLI_DIR}
}

# Before install: called in pkg install function, ie lit_install
pkg_pre_install() {
	PKG_NAME="$1"
	PKG_VERSION="$2"
	PKG_DATA=${INSTALLED_PKGS}/${PKG_NAME}
	# Already installed ?
	if [ -f "${PKG_DATA}/pkg.conf" ]; then
		# Set version=
		source ${PKG_DATA}/pkg.conf
		# Upgrade or custom version ?
		if [ "$version" == "$PKG_VERSION" ]; then
			echo -e "${CYAN}$PKG_NAME is already installed${NC}"
			echo "Version: $version" && unset version
			echo "" && exit 0
		fi
	fi
	echo "‚ö°Ô∏è Installing: $PKG_NAME $PKG_VERSION"
	print_separator
	# Continuing for install/upgrade - We work in Sli cache directory
	mkdir -p ${PKG_DATA} ${CACHE_DIR} && cd ${CACHE_DIR}
	# Keep track of previous installed files
	mv -f ${PKG_DATA}/files.list ${PKG_DATA}/files.list.old 2>/dev/null
}

# After install
pkg_post_install() {
	# Record version & clean cache
	echo "version=\"$PKG_VERSION\"" > ${PKG_DATA}/pkg.conf
	rm -rf ${SRC_DIR}
	unset PKG_NAME SRC_URL PKG_VERSION TARBALL SRC_DIR DL_URL
}

pkgs_list() {
	echo "‚ö°Ô∏è Installed packages"
	print_separator
	[ -d "$INSTALLED_PKGS" ] || mkdir ${INSTALLED_PKGS}
	for pkg in $(ls ${INSTALLED_PKGS}); do
		source ${INSTALLED_PKGS}/${pkg}/pkg.conf
		echo "$pkg $version" | awk '{ printf "%-15s %-30s\n", $1, $2}'
		unset version
	done
	print_separator
	echo ""
	echo "‚ö°Ô∏è Available packages"
	print_separator
	# Ensure packages.list was downloaded
	[ -f "$PKGS_LIST" ] || pkgs_get_list
	for pkg in $(cat ${PKGS_LIST}); do
		name=$(echo $pkg | cut -d "|" -f 1)
		version=$(echo $pkg | cut -d "|" -f 2)
		echo "$name $version" | awk '{ printf "%-15s %-30s\n", $1, $2}'
	done
	print_separator
}

# Downlad a packages.list, compare installed version to the list
# upgrade everything
pkgs_upgrade() {
	echo "‚ö°Ô∏è Packages Upgrade"
	print_separator
	pkgs_get_list
	echo "Checking for packages update..."
	echo ""
	# Simply check if version differ and upgrade since packages.list is
	# maintained by OxeeLi GitHub repos it sould be fine.
	for pkg in $(ls $INSTALLED_PKGS); do
		source ${INSTALLED_PKGS}/${pkg}/pkg.conf
		available="$(grep "^${pkg}|" ${PKGS_LIST} | cut -d "|" -f 2)"
		if [ "$version" != "$available" ]; then
			echo -e "$pkg ${CYAN}$version${NC} --> ${GREEN}$available${NC}"
			# We want to upgrade SLi at first
			if [ "$pkg" == "sli" ]; then
				upgrades="$pkg $upgrades"
			else
				upgrades="$ugrades $pkg"
			fi
		fi
		unset version available
	done
	nb=$(echo ${upgrades} | wc -w)
	if [ "$nb" -gt "0" ]; then
		echo ""
		read -p "Do you wich to upgrade $nb packages ? (yes/no) " up
		if [ "$up" == "yes" ]; then
			echo ""
			for pkg in ${upgrades}; do
				if [ $(declare -F ${pkg}_install) ]; then
					${pkg}_install
				fi
			done
		fi
	else
		echo -e "${CYAN}Packages are up-to-date.${NC}"
	fi
}

# Remove system files keep config/data in ~/.*
pkg_remove() {
	pkg="$1"
	if [ ! -d ${INSTALLED_PKGS}/${pkg} ]; then
		echo -e " ‚úò Can't find package: ${RED}$pkg${NC}"
		echo "" && exit 1
	fi
	echo "‚ö°Ô∏è Removing package: $pkg"
	print_separator
	for file in $(cat ${INSTALLED_PKGS}/${pkg}/files.list); do
		echo " * Removing: $file"
		sudo rm -f ${file}
	done
	rm -rf ${INSTALLED_PKGS}/${pkg}
	print_separator
}

#
# --- Handle Command ---
#
handle_command() {
	case "$1" in
		
		version|--version) sli_version ;;
		init)
			# Initialization
			case "$2" in
				wallet) wallet_init "--header" ;;
				lit) lit_init ;;
				*) sli_init ;;
			esac ;;

		start) service_start ${@} ;;
		stop) service_stop ${@} ;;
		rs|restart) service_restart ${@} ;;
		sc|show-config) config_show ${2} ;;
		ed|edit) config_edit ${2} ;;
		lg|logs) service_logs ${@} ;;
		st|status) service_status ${@} ;;
		nh|node-health) node_health ;;

		#
		# --- Tools ---
		#

		m2h|macaroon-to-hex) macaroon_to_hex ${2} ;;
		gpw|gen-passwords) passwords_change ${@} ;;
		nb|node-backup) node_backup ;;
		nr|node-restore) node_backup_restore ${@} ;;
		ne|node-extract) node_backup_extract ${@} ;;
		wa|wallet) wallet ${@} ;;
		sec|security-check) security_check ;;

		#
		# --- Packages manager ---
		#

		'in'|install)
			if [ "$2" == "sli" ]; then
				echo "If you need to reinstall this version, run: sli init"
				echo "" && exit 0
			fi
			if [ $(declare -F ${2}_install) ]; then
				${2}_install
				print_separator
			else
				echo "No package named: $2"
			fi ;;

		ls|list) pkgs_list ;;
		up|upgrade) pkgs_upgrade ;;
		rm|remove) pkg_remove ${2} ;;
		cc|clean-cache)
			echo "Removing cache directory content..."
			rm -rf ${CACHE_DIR}/* ;;

		*) usage ;;
	esac
}

# Let's have default empty line for all actions
echo ""
handle_command ${@}
echo ""
exit 0
